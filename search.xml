<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Caffe Loss分析]]></title>
    <url>%2F2017%2F10%2F20%2FCaffe%20Loss%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[Caffe_Loss 损失函数为深度学习中重要的一个组成部分，各种优化算法均是基于Loss来的，损失函数的设计好坏很大程度下能够影响最终网络学习的好坏。派生于 $LossLayer$,根据不同的Loss层有不同的参数; 1.基本函数主要包含构造函数，前向、后向以及Reshape，部分有SetUp的函数，每层都有Loss参数 123456789101112explicit XXXLossLayer(const LayerParameter&amp; param):LossLayer&lt;Dtype&gt;(param),diff_() &#123;&#125;virtual void Reshape(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top);virtual void Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top);virtual void Forward_gpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top);virtual void Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom);virtual void Backward_gpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom); 2.常用损失函数由于训练中，采用mini_batch的模式 (1) EuclideanLoss (欧式损失函数，L2损失) $EuclideanLoss$的公式表达为 $loss = \frac{1}{2n}\sum_{i=1}^n{(y_{i}-\hat{y}_{i})^2}$12345678910111213141516171819202122232425262728293031323334353637383940414243444546 //reshape函数，完成层次的reshape,diff_与输入的N*C维度相同 template &lt;typename Dtype&gt; void EuclideanLossLayer&lt;Dtype&gt;::Reshape(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; LossLayer&lt;Dtype&gt;::Reshape(bottom,top);//先调用基类的Reshape函数 CHECK_EQ(bottom[0]-&gt;count(1),bottom[1]-&gt;count(1));//label类别 diff_.Reshape(*bottom[0]);//一般是N*C*1*1 &#125; // Forward_cpu 前向 主要计算loss template &lt;typename Dtype&gt; void EuclideanLossLayer&lt;Dtype&gt;::Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; const int count = bottom[0]-&gt;count(); caffe_sub(count, bottom[0]-&gt;cpu_data(),//网络的输出 N*C bottom[1]-&gt;cpu_data(),//对应label N*C diff_.mutable_cpu_data()//对应的loss差分 );//完成 y_&#123;predicy&#125;-y_&#123;label&#125; //bottom[0]-bottom[1] Dtype dot = caffe_cpu_dot(count,diff_.cpu_data(),diff_.cpu_data()); //bottom[0]-&gt;num()== bottom[0].shape(0); Dtype loss = dot/bottom[0]-&gt;num()/Dtype(2);//loss/(2*n) top[0]-&gt;mutable_cpu_data()[0] = loss; &#125;//Backward_cpu f'(x) = 1/n*(y_&#123;predict&#125;-y_&#123;label&#125;)template &lt;typename Dtype&gt;void EuclideanLossLayer&lt;Dtype&gt;::Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp;propagate_down,const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom)&#123; for (size_t i = 0; i &lt; 2; i++) &#123; if (propagate_down[i]) &#123;//需要backward //对应predict-label 如果label为bottom[0]就需要乘以-1 const Dtype sign = (i==0) ? 1 : -1; //top[0]-&gt;cpu_diff()返回float* length = 1;下式为loss/n; const Dtype alpha = sign*top[0]-&gt;cpu_diff()[0]/bottom[0]-&gt;num(); //y = ax+by ; caffe_cpu_axpby(bottom[0]-&gt;count(),//count alpha,// loss/n diff_.cpu_data(),//y_&#123;predict&#125;-y_&#123;label&#125; Dtype(0), bottom[i]-&gt;mutable_cpu_diff() );//1/n*loss*(y_&#123;predict&#125;-y_&#123;label&#125;) &#125; &#125; //欧式损失函数形式简单，常用于做回归分析，做分类需要统一量纲。&#125; (2)SoftmaxWithLoss Softmax损失函数$\qquad softmax函数将输出的各个类别的概率值进行归一化，生成各个类别的prob$$\qquad 常用的分类损失函数，Softmax输出与Multinomial Logistic Loss的结合。公式如下:$$$ y_i = softmax(x_i) = \frac{exp(x_i)}{\sum_{j=1}^{n}{exp(x_j)}}$$$$loss = -log(y_k) ,k为实际的样本label$$$\qquad 损失函数的推导:\frac{\partial Loss}{\partial x_i}=\sum_{j=1}^{n}{\frac{\partial loss}{\partial y_j}*\frac{\partial y_j}{\partial x_i}}=-\frac{1}{y_k}*\frac{\partial y_k}{\partial x_i} \quad k为实际的label,其他的\frac{\partial loss}{\partial y_j} =0 \\$$$\qquad \frac{\partial y_k}{\partial x_i} = \frac{\partial softmax(x_k)}{\partial x_i}=\begin{cases} y_k*(1-y_k) \qquad k == i \\\\\ -y_k*y_i \qquad \qquad k \,\,!=\,i\end{cases}$$$$整理后可以发现\frac{\partial loss}{\partial x_i}=\begin{cases} y_k-1 \qquad k \,== \,i ，即i为实际label\\\\\ y_i \qquad \qquad k \,\,!=\,i,即i不是实际label\end{cases}$$ 具体代码的实现如下所示:1.SoftmaxWithLossLayer的输入:bottom123456789// bottom[0]为前层的特征输出，一般维度为N*C*1*1// bottom[1]为来自data层的样本标签，一般维度为N*1*1*1;// 申明const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom;//backward部分代码Dtype* bottom_diff = bottom[0]-&gt;mutable_cpu_diff();const Dtype* prob_data = prob_.cpu_data();caffe_copy(prob_.count(), prob_data, bottom_diff);const Dtype* label = bottom[1]-&gt;cpu_data();//label 2.SoftmaxWithLossLayer层的输出:top123456789// SoftmaxWithLossLayer的输出其实就是1*1*1*1的最终loss// 如果有多个的话实际就是也会保存softmax的输出，但是需要注意的是内部包含了//Softmax的FORWAR过程，产生的概率值保存在prob_内const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top;//forward部分代码 ,top[0]-&gt;mutable_cpu_data()[0] = loss / get_normalizer(normalization_, count);if (top.size() == 2) &#123; top[1]-&gt;ShareData(prob_);//top[1]保存softmax的前向概率&#125; 3.SoftmaxWithLossLayer的关键变量: $softmax_top_vec_,prob_$ 记录中间值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104shared_ptr&lt;Layer&lt;Dtype&gt; &gt; softmax_layer_;/// prob stores the output probability predictions from the SoftmaxLayer.Blob&lt;Dtype&gt; prob_;/// bottom vector holder used in call to the underlying SoftmaxLayer::Forwardvector&lt;Blob&lt;Dtype&gt;*&gt; softmax_bottom_vec_;/// top vector holder used in call to the underlying SoftmaxLayer::Forwardvector&lt;Blob&lt;Dtype&gt;*&gt; softmax_top_vec_;/// Whether to ignore instances with a certain label.bool has_ignore_label_;/// The label indicating that an instance should be ignored.int ignore_label_;/// How to normalize the output loss.LossParameter_NormalizationMode normalization_;int softmax_axis_, outer_num_, inner_num_;//softmax的输出与Loss的维度template &lt;typename Dtype&gt;void SoftmaxWithLossLayer&lt;Dtype&gt;::Reshape(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; LossLayer&lt;Dtype&gt;::Reshape(bottom,top);//先调用基类的reshape softmax_layer_-&gt;Reshape(softmax_bottom_vec,softmax_top_vec_); int axis = this-&gt;layer_param_.softmax_param().axis();//softmaxproto参数(1) softmax_axis_ = bottom[0]-&gt;CanonicalAxisIndex(axis);//正不变负倒数 outer_num_ = bottom[0]-&gt;count(0,softmax_axis_);// N mini_batch_size inner_num_ = bottom[0]-&gt;count(softmax_axis_+1);// H*W 一般为1*1 //保证outer_num_*inner_num_ = bottom[1]-&gt;count();//bottom[1]为label N if (top.size() &gt;= 2) &#123;//多个top实际上是并列的，prob_值完全一致 top[1]-&gt;Reshapelike(*bottom[0]); &#125;&#125;//forward是一个计算loss的过程，loss为-log(p_label)//由于softmaxWithLoss包含了Softmax所以需要经过Softmax的前向，并得到每个类别概率值template &lt;typename Dtype&gt;void SoftmaxWithLossLayer&lt;Dtype&gt;::Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; //调用Softmax的前向 softmax_layer_-&gt;Forward(softmax_bottom_vec_,softmax_top_vec_); //这里等同于softmax_top_vec_[0]-&gt;cpu_data(); const Dtype* prob_data = prob_.cpu_data(); const Dtype* label = bottom[1]-&gt;cpu_data();//label 一般来自Data层 // 一般是N*C(n个样本，每个C个预测概率)/ N == 类别数目 int dim = prob_.count()/out_num_; int count = 0;//统计实际参与loss的样本个数 Dtype loss = 0; for (size_t i = 0; i &lt; outer_num_; i++) &#123;//每个样本遍历 for (size_t j = 0; j &lt; inner_num_; j++) &#123; //可以认为j == 0 绝大多数成立 const int label_value = static_cast&lt;int&gt;(label[i*inner_num_+j]); if(has_ignore_label_ &amp;&amp; label_value == ignore_label_)&#123; // softmaxLayer的参数，可以选择不参与loss的类别 continue; &#125; else&#123;//实际需要判断label_value &gt; 0 ,&lt; prob_.shape(1) // -= 因为loss = -log(p_label),prob_data 是n*c的 loss -= log(std::max(prob_data[i*dim+label_value*inner_num_+j)], Dtype(FLT_MIN)));//防止溢出或prob出现NAN ++count; &#125; &#125; &#125; //全部样本遍历完成后，可以进行归一，其实也挺简单， // top[0]-&gt;mutable_cpu_data[0] = loss/归一化&#125;// Backward_cpu,这里的Backward实际需要更新的是softmax的输入接口的数据，// 中间有个y的转化，具体公式上面已经写出// bottom_diff = top_diff * softmaxWithloss' = top_diff * &#123;p -1 或者 p&#125;template &lt;typename Dtype&gt;void SoftmaxWithLossLayer&lt;Dtype&gt;::Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down,const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom)&#123; //fc输出与label的位置固定了，因此不需要如同欧式loss去判断label和fc的输入位置 if (propagate_down[1]) &#123; //label不需要backpropagate &#125; if (propagate_down[0]) &#123;//输入，需要更新 Dtype* bottom_diff = bottom[0]-&gt;mutable_cpu_diff();//需要修改的 const Dtype* prob_data = prob_.cpu_data();//N*C //这里把diff先确定为softmax输出的y值，即bottom_diff[t] = y_t ; caffe_copy(prob_.count(),prob_data,bottom_diff); const Dtype* label = bottom[1]-&gt;cpu_data(); // 也可以替换为bottom[1]-&gt;count(),实际就是类别C int dim = prob_.count()/ outer_num_;//NC/C == N int count = 0; for (size_t i = 0; i &lt; outer_num_; i++) &#123; //n个样本 for (size_t j = 0; j &lt; inner_num_; j++) &#123; // 实际j == 0 const int label_value = static_cast&lt;int&gt;(label[i*inner_num_+j]); if (has_ignore_label_ &amp;&amp; label_value == ignore_label_) &#123; //正好是忽略loss的类别 bottom_diff[i*dim+label_vale*inner_num_+j] = 0; &#125; else&#123; //这里需要考虑为什么，实际上之前所有的diff初始为y_t， //根据softmax的偏导知道真实label是y_t -1; bottom_diff[i*dim+label_vale*inner_num_+j] -= 1; ++count; &#125; &#125; &#125; //这里只完成了loss的一部分，还差top_diff即Loss //如果归一化，就进行归一，同cpu_forward //cpu_diff可以认为是Loss // Dtype loss_weight = top[0]-&gt;cpu_diff()[0]/归一化 caffe_scal(prob_count(),loss_weight,bottom_diff); &#125;&#125; (3) SmoothL1Loss (RCNN后提出的Loss)SmoothL1Loss为欧式均方误差的修改版，为分段函数，对离散点不敏感,具体的公式如下: $$SmoothL1Loss(x) =\begin{cases} 0.5*(sigma\x)^2 \qquad 其他\\ \left|x\right|-0.5/sigma^2 \qquad \left|x\right| &lt; 1./sigma^2\end{cases}$$整体的公式为:$x_{new} = x_{input}\w_{in},output = w_{out}*SmoothL1loss(x_{new});$1.基本的数据类型和意义:12345Blob&lt;Dtype&gt; diff_;// y_Blob&lt;Dtype&gt; error_;//lossBlob&lt;Dtype&gt; ones_;bool has_weights_; // weight权值Dtype sigma2_ ;// sigma 默认为1，此处sigma2_ = sigma*simga; 基本的功能函数 基本包含了LayerSetup Reshape Forward 和 Backward四个函数,具体实现如下1234567891011121314151617181920//构建layer层次,SmoothL1LossLayer的参数有sigma，默认为1template &lt;typename Dtype&gt;void SmoothL1LossLayer&lt;Dtype&gt;::LayerSetup(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp;bottom,const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; SmoothL1LossParameter loss_param = this-&gt;layer_param_.smooth_l1_loss_param(); sigma2_ = loss_param.sigma()*loss_param.sigma(); has_weights_ = (bottom.size() &gt;= 3);//bottom[3]---为weights if (has_weights_) &#123; //bottom[3] == out_weight;//w_out //bottom[2] == in_weight;// w_in &#125;&#125;// Reshape 根据输入输出调节结构template &lt;typename Dtype&gt;void SmoothL1LossLayer&lt;Dtype&gt;::Reshape(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom,const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; LossLayer&lt;Dtype&gt;::Reshape(bottom,top);//基函数 //forward&#125; 本文作者： 张峰本文链接：https://zhanglaplace.github.io/2017/10/20版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Caffe</category>
      </categories>
      <tags>
        <tag>Caffe</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Caffe 激励层(Activation)分析]]></title>
    <url>%2F2017%2F10%2F20%2FCaffe%20%E6%BF%80%E5%8A%B1%E5%87%BD%E6%95%B0(Activation)%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[Caffe_Activation 一般来说，激励层的输入输出尺寸一致，为非线性函数，完成非线性映射，从而能够拟合更为复杂的函数表达式激励层都派生于NeuronLayer: class XXXlayer : public NeuronLayer 1.基本函数 激励层的基本函数较为简单，主要包含构造函数和前向、后向函数1234567891011explicit XXXLayer(const LayerParameter&amp; param) :NeuronLayer&lt;Dtype&gt;(param)&#123;&#125;virtual inline const char* type() const &#123; return "layerNane"; &#125;virtual void Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top);virtual void Forward_gpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top);virtual void Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom);virtual void Backward_gpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down, const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom); 2.常用激励函数(1) Relu/PRelu Rectufied Linear Units ReLU的函数表达式为 $f(x) = x*(x&gt;0) + negative_slope\x\(x &lt;= 0)$ 具体实现如下1234567891011121314151617181920212223242526272829303132 //forward_cpu template &lt;typename Dtype&gt; void ReLULayer&lt;Dtype&gt;::Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; // 根据bottom求解top const Dtype* bottom_data = bottom[0]-&gt;cpu_data();//const 不可修饰 Dtype* top_data = top[0]-&gt;mutable_cpu_data();//可修饰 const int count = bottom[0]-&gt;count();//因为count_一致，也可用top Dtype negative_slope = this-&gt;layer_param_.relu_param().negative_slope(); for (size_t i = 0; i &lt; count; i++) &#123; top_data[i] = bottom_data[i]*(bottom_data[i] &gt; 0) + negative_slope*bottom_data[i]*(bottom_data[i] &lt;= 0); &#125; &#125; //Backward_cpu // 导数形式 f'(x) = 1 x&gt;0 ; negative_slope*x x&lt;0 template &lt;typename Dtype&gt; void ReLULayer&lt;Dtype&gt;::Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down,const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom)&#123; const Dtype* top_diff = top[0].cpu_diff();//top diff const Dtype* bottom_data = bottom[0].cpu_data();//用以判断x是否大于0 Dtype* bottom_diff = bottom[0].cpu_diff();//bottom diff const int count = bottom[0].count(); for (size_t i = 0; i &lt; count; i++) &#123; bottom_diff[i] = top_diff[i]*(bottom_data[i] &gt; 0) +negative_slope*(bottom_data[i] &lt;= 0); &#125; &#125;// Relu 函数形式简单，导函数简单，能有效的解决梯度弥散问题，但是当x小于0时，易碎// 但是网络多为多神经元，所以实际应用中不会影响到网络的正常训练。 (2) Sigmoid (S曲线) Sigmoid函数表达式为$f(x) = 1./(1+exp(-x))$;值域0-1，常作为BP神经网络的激活函数由于输出为0-1，也作为logistic回归分析的概率输出函数。具体实现如下;1234567891011121314151617181920212223242526272829303132333435 //定义一个sigmoid函数方便计算 template &lt;typename Dtype&gt; inline Dtype sigmoid(Dtype x)&#123; return 1./(1.+exp(-x)); &#125; //前向 直接带入sigmoid函数即可 template &lt;typename Dtype&gt; void SigmoidLayer&lt;Dtype&gt;::Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; const Dtype* bottom_data = bottom[0]-&gt;cpu_data(); Dtype* top_data = top[0]-&gt;mutable_cpu_data();//需要计算 const int count = bottom[0]-&gt;count();//N*C*H*W; for (size_t i = 0; i &lt; count; i++) &#123; top_data[i] = sigmoid(bottom_data[i]); &#125; &#125; //Backward_cpu 由于f'(x) = f(x)*(1-f(x))，所以需要top_data // bottom_diff = top_diff*f'(bottom_data) = top_diff*top_data*(1-top_data) template &lt;typename Dtype&gt; void SigmoidLayer&lt;Dtype&gt;::Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down,vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom)&#123; const Dtype* top_diff = top[0]-&gt;cpu_diff(); const Dtype* top_data = top[0]-&gt;cpu_data(); Dtype* bottom_diff = bottom[0]-&gt;mutable_cpu_diff(); //需要计算 const int count = bottom[0]-&gt;count(); for (size_t i = 0; i &lt; count; i++) &#123; //top_data[i] == sigmoid(bottom_data[i]); bottom_diff[i] = top_diff[i]*top_data[i]*(1.-top_data[i]); &#125; &#125;// Sigmoid函数可以作为二分类的概率输出，也可以作为激活函数完成非线性映射，但是网络// 增加时，容易出现梯度弥散问题，目前在CNN中基本不使用 (3)TanH,双正切函数 TanH函数的表达式为 $f(x) =\frac{(1.-exp(-2x))}{(1.+exp(-2x))}$;值域0-1,与sigmoid函数有相同的问题,但是TanH在RNN中使用较为广泛,理由参考，具体实现如下所示。 12345678910111213141516171819202122232425262728293031//定义一个tanH的函数表达式,实际已经封装inline Dtype TanH(Dtype x)&#123; return (1.-exp(-2*x))/(1.+exp(-2*x));&#125;//Forward_cputemplate &lt;typename Dtype&gt;void TanHLayer&lt;Dtype&gt;::Forward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom, vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top)&#123; const Dtype* bottom_data = bottom[0]-&gt;cpu_data(); Dtype* top_data = top[0]-&gt;mutable_cpu_data(); const int count = bottom[0]-&gt;count(); for (size_t i = 0; i &lt; count; i++) &#123; top[i] = TanH(bottom_data[i]); &#125;&#125;//Backward_cpu f'(x) = 1-f(x)*f(x);// bottom_diff = top_diff(1-top_data*top_data);template &lt;typename Dtype&gt;void TanHLayer&lt;Dtype&gt;::Backward_cpu(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top, const vector&lt;bool&gt;&amp; propagate_down,vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom)&#123; const Dtype* top_diff = top[0]-&gt;cpu_diff(); const Dtype* top_data = top[0]-&gt;cpu_data(); Dtype* bottom_diff = bottom[0]-&gt;mutable_cpu_diff(); //需要计算 const int count = bottom[0]-&gt;count(); for (size_t i = 0; i &lt; count; i++) &#123; //top_data[i] == TanH(bottom_data[i]); bottom_diff[i] = top_diff[i]*(1.-top_data[i]*top_data[i]); &#125;&#125; 其他的激励函数就不在枚举，可以查看具体的caffe源码，实现大致相同 3.说明(1) 梯度弥散和梯度爆炸 网络方向传播时，loss经过激励函数会有$loss*\partial{f(x)}$,而如sigmoid的函数，max($\partial{f(x)}$)只有1/4因此深层网络传播时loss越来越小，则出现前层网络未完整学习而后层网络学习饱和的现象 (2) Caffe激励层的构建 如上述的代码所示，激励层主要完成forward和Bacward的函数实现即可，由构建的函数表达式推导出它的导函数形式，弄懂bottom_data,top_data,bottom_diff,top_diff即可 本文作者： 张峰本文链接：https://zhanglaplace.github.io/2017/10/20%E5%88%86%E6%9E%90/)版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Caffe</category>
      </categories>
      <tags>
        <tag>Caffe</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Caffe Net分析]]></title>
    <url>%2F2017%2F10%2F19%2FCaffe_Net%2F</url>
    <content type="text"><![CDATA[Caffe_Net1.基本数据1234567891011vector&lt;shared_ptr&lt;Layer&lt;Dtype&gt; &gt; &gt; layers_; // 记录每一层的layer参数vector&lt;vector&lt;Blob&lt;Dtype&gt;*&gt; &gt; bottom_vecs_;vector&lt;vector&lt;int&gt; &gt; bottom_id_vecs_;vector&lt;vector&lt;bool&gt; &gt; bottom_need_backward_;/// top_vecs stores the vectors containing the output for each layervector&lt;vector&lt;Blob&lt;Dtype&gt;*&gt; &gt; top_vecs_;vector&lt;vector&lt;int&gt; &gt; top_id_vecs_;vector&lt;vector&lt;int&gt; &gt; param_id_vecs_;vector&lt;string&gt; layer_names_;//learnable_params_[learnable_param_ids_[i]] == params_[i].get()vector&lt;Blob&lt;Dtype&gt;*&gt; learnable_params_;//层间权重与bias 2. 常用的函数介绍了Caffe内的Net的常用函数: 12345678910111213141516171819202122232425262728293031323334353637383940414243 const string&amp; name()&#123;return name_;&#125;//网络的名称 const vector&lt;string&gt;&amp; layer_names&#123;return layer_names_;&#125;// net每层的layer名称 // net内每层的layer的Blob名称 const vector&lt;string&gt;&amp; blob_names()&#123;return blob_names_;&#125; //net内层次间的权值与bias const vector&lt;shared_ptr&lt;Blob&lt;Dtype&gt;&gt;&gt;&amp; blobs()&#123;return blob_;&#125;; //net内的layers const vector&lt;shared_ptr&lt;Layer&lt;Dtype&gt;&gt;&gt;&amp; layers()&#123;return layers_;&#125;; //net-&gt;bottom_vecs() 返回该layer的输入，输出向量， //以及具体的 top_id_vecs[layer_id][top_id]; const vector&lt;vector&lt;Blob&lt;Dtype&gt;*&gt; &gt;&amp; bottom_vecs()&#123; return bottom_vecs_;&#125; const vector&lt;vector&lt;Blob&lt;Dtype&gt;*&gt; &gt;&amp; top_vecs() &#123; return top_vecs_;&#125; const vector&lt;vector&lt;int&gt; &gt;&amp; bottom_id_vecs()&#123; return bottom_id_vecs_;&#125; const vector&lt;vector&lt;int&gt; &gt;&amp; top_id_vecs() &#123; return top_id_vecs_;&#125; void CopyTrainedLayersFrom(const string trained_filename);//加载权重 //网络的输入输出 //感觉等效于bottom_vecs_[0] const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; input_blobs()&#123;return net_input_blobs_;&#125; const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; output_blobs() &#123;return net_output_blobs;&#125;//top_vecs[top_vecs.size()-1]; const int num_input()&#123;return net_input_blobs_.size()&#125;;//输入blob的size //has_blob()然后find return const shared_ptr&lt;Blob&lt;Dtype&gt;&gt;blob_by_name(const string&amp; blob_name);// 前向计算loss和网络的输出const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; forward(Dtype* loss = NULL);// --- *loss = ForwardFromTo(0.layers_.size()-1);// --- 此处调用 Dtype* Net&lt;Dtype&gt;::ForwardFrom(int start,int end)for (size_t i = start; i &lt; end; i++)&#123; //多态，调用具体的Layer的Forward函数,并返回该层次的loss Dtype layer_loss = layers_[i]-&gt;Forward(bottom_vecs_[i],top_vecs_[i]); loss += layer_loss;&#125;return loss;// backward反向，更新权值void Net&lt;Dtype&gt;::Backward()&#123; // BackwardFromTo(layers_size()-1,0); // 具体函数实现如第三部分 if (debug_info_) &#123; /*层次的参数*/ &#125;&#125; 3.具体函数实现1234567891011121314151617181920212223242526272829303132333435template &lt;typename Dtype&gt; const int Net&lt;Dtype&gt;::AppendBottom(const NetParamter&amp; param, int layer_id,int bottom_id,set&lt;string&gt;* availabel_blobs,map&lt;string,int&gt;* blob_name_to_idx)&#123; const LayerParammeter&amp; layer_param = param.layer(layer_id); const string&amp; blob_name = layer_param.bottom(bottom_id); const int blob_id = (*blob_name_to_idx)[blob_name]; //layer输入的shape等 bottom_vecs_[layer_id].push_back(blobs_[blob_id].get()); bottom_id_vecs_[layer_id].push_back(blob_id); //LOG CONV&lt;--data 等,只要是丢入输入 &#125; // learnable_params_ //conv的shape一般为num_output*input_channels*kernel_width*kernel_height //bias的shape一般为Num_output template &lt;typename Dtype&gt; void Net&lt;Dtype&gt;::AppendParam(const NetParameter&amp; param, const int layer_id, const int param_id) &#123; const int learnable_param_id = learnable_params_.size(); learnable_params_.push_back(params_[net_param_id].get()); learnable_param_ids_.push_back(learnable_param_id); has_params_lr_.push_back(param_spec-&gt;has_lr_mult()); has_params_decay_.push_back(param_spec-&gt;has_decay_mult()); params_lr_.push_back(param_spec-&gt;lr_mult()); params_weight_decay_.push_back(param_spec-&gt;decay_mult()); &#125; template &lt;typename Dtype&gt; void Net&lt;Dtype&gt;::BackwardFromTo(int start,int end)&#123; for(int i = start;i &gt;= end;--i)&#123; //backward 调用各层次的backward更新权值和bias layers_[i].Backward(top_vecs_[i],bottom_need_backward_[i], bottom_vecs_[i]); &#125; &#125; 4.基本流程 基本流程：Net构造函数开始 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109// 递归更新变量vectot&lt;string&gt;*stage ;int level;//起始调用net_.reset(new Net&lt;float&gt;(model_file, TEST));//送入prototxt文件和Test OR Trainexplicit Net(const string&amp; param_file,Phase phase,const int level = 0, vector&lt;string&gt;* stage = NULL,const Net* root_net = NULL);// 解析保存在NetParamter param内,这里用到了//protobuf::TextFormat::Parse(FileInputStream*,param)ReadNetParamsFromTextFileOrDie(param_file,&amp;param);// 读取了NetParamter 后需要进行整个网络的初始化工作Init(param); //初始化网络的接口，下续为具体实现FilterNet(param, &amp;filtered_param);// 打印网络结构/*内部会完成split added 如果有必要(残差结构),记录层与层之间的联系关系与层次的名称等，是否有loss_weight，layer的size等*/InsertSplits(filtered_param,&amp;param);for (size_t i = 0; i &lt; param.layer_size(); i++) &#123; //遍历setupLayer const LayerParammeter&amp; layer_param = param.layer(i);//层次的参数 layers_.push_back(LayerRegistry&lt;Dtype&gt;::CreateLayer(layer_param)); // CreateLayer会走layer_factory的CreateLayer的注册 ,比如input,conv,bn... layer_names_.push_back(layer_param.name()); //开始继续遍历每层输入的具体的细节,第i个layer的第botom_id个输入 for (size_t bottom_id = 0; bottom_id &lt; layer_param.bottom_size(); bottom_id++) &#123; const int blob_id = AppendBottom(param,i,bottom_id,&amp;availabel_blobs,&amp;blob_name_to_idx); &#125; //开始继续遍历每层输出的具体细节，第i个layer的第 top_id的输出 for (size_t top_id = 0; top_id &lt; layer_param.top_size(); top_id++) &#123; AppendTop(param,i,top_id,&amp;availabel_blobs,&amp;blob_name_to_idx); if (layer_param.type()== "Input") &#123;//输入 const int blob_id = blobs_.size() - 1; net_input_blob_indices_.push_back(blob_id); net_input_blobs_.push_back(blobs_[blob_id].get()); &#125; &#125; //多态，具体调用具体的layer的Setup函数 layers_[layer_id]-&gt;SetUp(bottom_vecs_[layer_id], top_vecs_[layer_id]); //每个输出遍历 for (size_t top_id = 0; top_id &lt; top_vecs_[layer_id].size(); top_id++) &#123; /*完成层次的blob_loss_weights,并统计memory_used_*/; memory_used_ += top_vecs_[layer_id][top_id]-&gt;count(); &#125; //总的memory_used_: memory_used_*sizeof(Dtype); //如果层次间有学习权值和偏置，则需要再次设置，比如conv //num_param_blobs weights And bias // relu pooling等层无中间权值参数，则num_param_blobs = 0 for (int param_id = 0; param_id &lt; num_param_blobs; ++param_id) &#123; AppendParam(param, layer_id, param_id); &#125;&#125;/*接下来需要研究网络的backwards问题，决定哪些层次对loss有贡献，并且检查哪些层次不需要back_propagate_down操作，遍历是反向的操作一个layer是否需要回溯计算，主要依据两个方面：(1)该layer的top blob 是否参与loss的计算；(2):该layer的bottomblob 是否需要回溯计算，比如Data层一般就不需要backward computation */for (size_t layer_id = layers_.size()-1; layer_id &gt;= 0; --layer_id)&#123; bool layer_contributes_loss = false;//默认是无贡献的 bool layer_skip_propagate_down = true;// 默认不参与backwards的loss贡献 //Layer内的输出遍历 for (size_t top_id = 0; top_id &lt; top_vecs_[layer_id].size(); top_id++) &#123; //blob_name_[index]名字 string&amp; blob_name = blob_names_[top_id_vecs_[layer_id][top_id]]; if (layer_[layer_id]-&gt;loss(top_id)|| blobs_under_loss.find(blob_name) != blobs_under_loss.end()) &#123; //该层次的layerloss不为0或者loss_weight = 1; layer_contributes_loss = true; &#125; if (blobs_skip_backp.find(blob_name) == blobs_skip_backp.end()) &#123; layer_skip_propagate_down = false; &#125; &#125; //同理 Layer内的输入遍历 for (size_t bottom_id = 0; bottom_id &lt; bottom_vecs_[layer_id].size(); bottom_id++) &#123; if (layer_contributes_loss) &#123; string* blob_name = blob_names_[bottom_id_vecs_[layer_id][bottom_id]]; blobs_under_loss.insert(blob_name); &#125; else&#123; bottom_need_backward_[layer_id][bottom_id] = false; &#125; if (!bottom_need_backward_[layer_id][bottom_id]) &#123; string&amp;blob_name = blob_names_[bottom_id_vecs_[layer_id][bottom_id]]; blok_skip_backp.insert(blob_name); &#125; &#125; /*code*/&#125;//init函数尾 5.说明 blob_name_to_idx是一个局部变量，其实它是在当前layer的top blob 和下一层的bottom blob间起着一个桥梁作用。 blob_name_to_idx中元素的pair是从网络最开始一层一层搭建的过程中压入map的，其中的name和id都是不重复的。name是关键字，不重复是map数据结构的必然要求，id也是不重复的，—0,1,2…blob_name_to_idx和blobs_一样，在”Normal output”的情形下，每次遍历到一个top blob的时候都会更新。 本文作者： 张峰本文链接： https://zhanglaplace.github.io/2017/10/19/Caffe_Net/版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Caffe</category>
      </categories>
      <tags>
        <tag>Caffe</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Caffe Layer分析]]></title>
    <url>%2F2017%2F10%2F19%2FCaffe_layer%2F</url>
    <content type="text"><![CDATA[Caffe_Layers1.基本数据结构1234//Layer层主要的的参数LayerParamter layer_param_; // protobuf内的layer参数vector&lt;shared_ptr&lt;Blob&lt;Dtype&gt;*&gt;&gt;blobs_;//存储layer的参数，vector&lt;bool&gt;param_propagate_down_;//表示是否计算各个blobs反向误差。 2.主要函数接口123456virtual void SetUp(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp;bottom, vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; top);Dtype Forward(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp;bottom, vector&lt;Blob&lt;Dtype&gt;*&gt;&amp;top);void Backward(const vector&lt;Blob&lt;Dtype&gt;*&gt;&amp;top,const vector&lt;bool&gt;param_propagate_down,vector&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom); 3.具体的Layer分析具体的常用Layer分析 (1) 数据层(DataLayer)数据通过数据层进入Layer,可以来自于数据库(LevelDB或者LMDB),也可以来自内存，HDF5等12345678910111213//Database：类型 Database//必须参数 source,batch_size//可选参数：rand_skip,mirror,backend[default LEVELDB]// In-Memory：类型 MemoryData// 必选参数：batch_size，channels,height,width//HDF5 Input:类型 HDF5Data//必选参数: source,batch_size//Images : 类型 ImageData//必要参数：source(文件名label),batch_size//可选参数：rand_skip,shuffle,new_width,new_height; (2) 激励层(neuron_layers)一般来说，激励层是element-wise，输入输出大小相同，一般非线性函数 输入：n\*c\*h\*w 输出：n\*c\*h\*w 12345678910111213141516171819//ReLU/PReLU//可选参数 negative_slope 指定输入值小于零时的输出。// f(x) = x*(x&gt;0)+negative_slope*(x&lt;=0)//ReLU目前使用最为广泛，收敛快，解决梯度弥散问题layer&#123; name:"relu" type:"ReLU" bottom:"conv1" top:"conv1"&#125;//Sigmoid//f(x) = 1./(1+exp(-x)); 负无穷--正无穷映射到-1---1layer&#123; name:"sigmoid-test" bottom:"conv1" top:"conv1" type:"Sigmoid"&#125; (3) 视觉层(vision_layer)常用layer操作 12345678910111213141516171819202122232425262728293031323334353637383940414243444546 //卷积层(Convolution):类型Convolution //包含学习率，输出卷积核，卷积核size，初始方式，权值衰减 //假使输入n*ci*hi*wi,则输出 // new_h = ((hi-kernel_h)+2*pad_h)/stride+1; // new_w = ((wi-kernel_w)+2*pad_w)/stride+1; //输出n*num_output*new_h*new_w; layer&#123; name: "conv1" type: "CONVOLUTION" bottom: "data" top: "conv1" blobs_lr: 1 blobs_lr: 2 weight_decay: 1 weight_decay: 0 convolution_param &#123; num_output: 96 kernel_size: 11 stride: 4 weight_filler &#123; type: "gaussian" std: 0.01 &#125; bias_filler &#123; type: "constant" value: 0 &#125; &#125; &#125;//池化层(Pooling) 类型 Pooling// (hi-kernel_h)/2+1;layer&#123; name:"pool1" type:"POOLING" bottom:"conv1" top:"conv1" pooling_param&#123; pool:MAX //AVE,STOCHASTIC kernel_size:3 stride:2 &#125;&#125;//BatchNormalization// x' = (x-u)/δ ;y = α*x'+β; (4) 损失层(Loss_layer)最小化输出于目标的LOSS来驱动学习更新 1//Softmax 4.说明SetUp函数需要根据实际的参数设置进行实现，对各种类型的参数初始化；Forward和Backward对应前向计算和反向更新，输入统一都是bottom，输出为top，其中Backward里面有个propagate_down参数，用来表示该Layer是否反向传播参数。在Forward和Backward的具体实现里，会根据Caffe::mode()进行对应的操作，即使用cpu或者gpu进行计算，两个都实现了对应的接口Forward_cpu、Forward_gpu和Backward_cpu、Backward_gpu，这些接口都是virtual，具体还是要根据layer的类型进行对应的计算（注意：有些layer并没有GPU计算的实现，所以封装时加入了CPU的计算作为后备）。另外，还实现了ToProto的接口，将Layer的参数写入到protocol buffer文件中。 本文作者： 张峰本文链接： https://zhanglaplace.github.io/2017/10/19/Caffe_layer/版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Caffe</category>
      </categories>
      <tags>
        <tag>Caffe</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Caffe Blob分析]]></title>
    <url>%2F2017%2F10%2F18%2FCaffe_blob%2F</url>
    <content type="text"><![CDATA[Caffe_blob1.基本数据结构 Blob为模板类，可以理解为四维数组，n * c * h * w的结构,Layer内为blob输入data和diff，Layer间的blob为学习的参数.内部封装了SyncedMemory类,该类负责存储分配和主机与设备的同步12345678protected: shared_ptr&lt;SyncedMemory&gt; data_; // data指针 shared_ptr&lt;SyncedMemory&gt; diff_; // diff指针 vector&lt;int&gt; shape_; // blob形状 int count_; // blob的nchw // 当前的Blob容量，当Blob reshape后count&gt; capacity_时，capacity_ = count_; // 重新new 然后 reset data和 diff int capacity_; 2.常用函数Blob类中常用的函数如下所示 1234567891011121314151617181920212223242526272829Blob&lt;float&gt;test;//explicit关键字的作用是禁止单参数构造函数的隐式转换explicit Blob(const int num, const int channels, const int height, const int width);test.shape_string();//初始为空 0 0 0 0//Reshape函数将num,channels,height,width传递给vector shape_test.Reshape(1,2,3,4);// shape_string() 1,2,3,4test.shape(i);// NCHWtest.count(int start_axis,int end_axis); // start_axis---end_axis .x* shape[i]test.count();// nchw count(1) chw count(2) hw.....//shared_ptr&lt;SyncedMemory&gt; data_-&gt;cpu_data();const float* data = test.cpu_data();const float* diff = test.cpu_diff();float* data_1 = test.mutable_cpu_data();//mutable修饰的表示可以修改内部值float* diff_1 = test.mutable_cpu_diff();test.asum_data();//求和 L1范数test.sumsq_data();//平方和 L2范数test.Update();//data = data-diff;a.ToProto(BlobProto&amp; bp,true/false);//(FromProto)// if &lt; 0 ,return num_axis()+axis_index;//索引序列int index = a.CanonicalAxisIndex(int axis_index);int offset(n,c,h,w);//((n*channels()+c)*height()+h)*width()+wfloat data_at(n,c,h,w);//return cpu_data()[offset(n,c,h,w)];float diff_at(n,c,h,w);//return cpu_diff()[offset(n,c,h,w)];inline const shared_ptr&lt;SyncedMemory&gt;&amp; data() const&#123;return _data&#125;;void scale_data(Dtype scale_factor);// data乘以一个标量。同理 scale_diff();void CopyFrom(const Blob&lt;Dtype&gt;&amp; source, bool copy_diff = false, bool reshape = false); // copy_diff是否复制diff 3.写入磁盘操作123456789101112131415161718192021222324//Blob内部值写入到磁盘Blob&lt;float&gt;a;a.Reshape(1,2,3,4);const int count = a.count();for (size_t i = 0; i &lt; count; i++) &#123; a[i] = i;//init the test Blob&#125;BlobProto bp,bp2;a.ToProto(&amp;bp,true);//写入data和diff到bp中WriteProtoToBinaryFile(bp,"a.blob");//写入磁盘ReadProtoFromBinaryFile("a.blob",&amp;bp2);//从磁盘读取blobBlob&lt;float&gt;b;b.FromProto(bp2,true);//序列化对象bp2中克隆b，完整克隆for (size_t n = 0; n &lt; b.num(); n++) &#123; for (size_t c = 0; c &lt; b.channels(); c++) &#123; for (size_t h = 0; h &lt; b.height(); h++) &#123; for (size_t w = 0; w &lt; b.width(); w++) &#123; cout&lt;&lt;"b["&lt;&lt;n&lt;&lt;"]["&lt;&lt;c&lt;&lt;"]["&lt;&lt;h&lt;&lt;"]["&lt;&lt;w&lt;&lt;"]["&lt;&lt;w&lt;&lt;"]="&lt;&lt; b[(((n*b.channels()+c)*b.height)+h)*b.width()+w]&lt;&lt;endl; //(((n*c+ci)*h+hi)*w+wi) &#125; &#125; &#125;&#125; 4.部分函数的具体实现本部分的实现未考虑参数是否合理。一般操作blob需要分CPU和GPU,采用math_functions具体计算 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899 template &lt;typename Dtype&gt; void Blob&lt;Dtype&gt;::Reshape(const vector&lt;int&gt;&amp; shape)&#123;//reshape操作 count_ = 1;//初始count_ NCHW; shape_.resize(shape.size()); for (size_t i = 0; i &lt; shape.size(); i++) &#123; count_ *= shape[i]; shape_[i] = shape[i]; if (count_ &gt; capacity_) &#123; //reshape的size大于了目前的最大容量 capacity_ = count_; data_.reset(new SyncedMemory(capacity_*sizeof(Dtype))); diff_.reset(new SyncedMemory(capacity_*sizeof(Dtype))); &#125; &#125; &#125; template &lt;typename Dtype&gt; void Blob&lt;Dtype&gt;::Reshape(int n,int c,int h ,int w)&#123;//reshape操作 vector&lt;int&gt;shape(4); shape[0] = n; shape[1] = c; shape[2] = h; shape[3] = w; Reshape(shape); &#125; template &lt;typename Dtype&gt; const Dtype* Blob&lt;Dtype&gt;::cpu_data()&#123; //实际调用的shared_ptr&lt;SyncedMemory&gt;data_-&gt;cpu_data();,同理cpu_diff(); CHECK(data_); return (const Dtype*)data_-&gt;cpu_data(); &#125;template &lt;typename Dtype&gt;void Blob&lt;Dtype&gt;::Updata()&#123; //data = data-diff;需要判断cpu OR gpu switch (data_-&gt;head()) &#123; case SyncedMemory::HEAD_AT_CPU: caffe_axpy&lt;Dtype&gt;(count_,Dtype(-1), static_cast&lt;const&lt;Dtype*&gt;(diff_-&gt;cpu_data()), static_cast&lt;Dtype*&gt;(data_-&gt;mutable_cpu_data())); &#125; case SyncedMemory::HEAD_AT_GPU://在gpu或者CPU/GPU已经同步 case SyncedMemory::SYNCED: #ifndef CPU_ONLY caffe_gpu_axpy&lt;Dtype&gt;(count_.Dtype(-1), static_cast&lt;const&lt;Dtype*&gt;(diff_-&gt;gpu_data()), static_cast&lt;Dtype*&gt;(data_-&gt;mutable_gpu_data()))&#125;template &lt;typename Dtype&gt; //从source 拷贝数据,copy_diff控制是拷贝diff还是datavoid Blob&lt;Dtype&gt;::CopyFrom(const Blob&amp; source, bool copy_diff, bool reshape) &#123; if (source.count() != count_ || source.shape() != shape_) &#123; if (reshape) &#123; ReshapeLike(source); &#125; &#125; switch (Caffe::mode()) &#123; case Caffe::GPU: if (copy_diff) &#123; //copy diff caffe_copy(count_, source.gpu_diff(), static_cast&lt;Dtype*&gt;(diff_-&gt;mutable_gpu_data())); &#125; else &#123; caffe_copy(count_, source.gpu_data(), static_cast&lt;Dtype*&gt;(data_-&gt;mutable_gpu_data())); &#125; break; case Caffe::CPU: if (copy_diff) &#123; caffe_copy(count_, source.cpu_diff(), static_cast&lt;Dtype*&gt;(diff_-&gt;mutable_cpu_data())); &#125; else &#123; caffe_copy(count_, source.cpu_data(), static_cast&lt;Dtype*&gt;(data_-&gt;mutable_cpu_data())); &#125; break; default: LOG(FATAL) &lt;&lt; "Unknown caffe mode."; &#125;&#125;template &lt;typename Dtype&gt;void Blob&lt;Dtype&gt;::ToProto(BlobProto* proto,bool write_diff)&#123; proto-&gt;clear_shape(); for (size_t i = 0; i &lt; shaoe_.size(); i++) &#123; proto-&gt;mutable_shape()-&gt;add_dim(shape_[i]); &#125; proto-&gt;clear_data(); proto-&gt;clear_diff(); const Dtype* data_vec = cpu_data(); for (size_t i = 0; i &lt; count_; i++) &#123; proto-&gt;add_data(data_vec[i]);//data写入proto &#125; if (write_diff) &#123; const Dtype* diff_vec = cpu_diff(); for (size_t i = 0; i &lt; count_; i++) &#123; proto-&gt;add_diff(diff_vec[i]);//diff写入proto &#125; &#125;&#125; 5.说明123456/*Blob作为一个最基础的类，其中构造函数开辟一个内存空间来存储数据，Reshape函数在Layer中的reshape或者forward操作中来调整top的输出维度。同时在改变Blob大小时， 内存将会被重新分配如果内存大小不够了，并且额外的内存将不会被释放。对input的blob进行reshape, 若立马调用Net::Backward是会出错的，因为reshape之后，要么Net::forward或者Net::Reshape就会被调用来将新的input shape传播到高层 */ 本文作者： 张峰本文链接： https://zhanglaplace.github.io/2017/10/18/Caffe_blob/版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Caffe</category>
      </categories>
      <tags>
        <tag>Caffe</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[统计学习方法 1-统计学习算法概述]]></title>
    <url>%2F2017%2F09%2F14%2F%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%951-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[统计学习的主要特点统计学习的对象是数据，目的是对数据进行预测与分析，特别是对未知数据进行预测与分析。 分类监督学习(supervised learning) 无监督学习(unsupervised learning) 半监督学习(self-supervised learning) 增强式学习(reinfoucement learning) 监督学习(supervised learning)输入实际x的特征向量记做$x = (x^{(1)},x^{(2)},x^{(3)}, \cdots ,x^{(n)})^T$训练集：$T={(x_1,y_1),(x_2,y_2),(x_3,y_3),\cdots (x_n,y_n)}$输入变量与输出变量均为连续变量的预测问题为回归问题；输出变量为有限个离散变量的预测问题为分类问题; 本文作者： 张峰本文链接：https://zhanglaplace.github.io/2017/09/14版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>统计学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linear Regression]]></title>
    <url>%2F2017%2F09%2F10%2FLinear-Regression%2F</url>
    <content type="text"><![CDATA[Model and Cost Function(模型和损失函数)对于model，给出如下定义 $y = \theta x$损失函数$J(\theta ): minimize\frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x^i)-y^i)^2$Gradient descent algorithmrepeat until convergence{ $\quad \theta_j := \theta_j - \alpha\frac{\partial}{\partial \theta_j}J(\theta)$} SVM寻找两类样本正中间的划分超平面，因为该超平面对训练样本的布局扰动的容忍度最好，是最鲁棒的划分超平面方程:$$wx+b = 0$$我们假使$$\begin{cases}wx_i+b &gt;= 1 \qquad\quad y_i = +1 \\\\\wx_i+b &lt;=-1 \qquad\, y_i = -1\end{cases}$$则距离超平面最近的几个点使得下列式子成立$$\max\limits_{w,b}(\frac{2}{||w||}) \rightarrow \min_{w,b}\frac{1}{2}||w||^2$$$$s.t. y_i(wx_i+b)\ge 1 i = 1,2,…,m.$$通用表达式: $f(x)=w\psi(x)+b = \sum_{i=1}^{m}a_iy_i\psi(x_i)^T\psi(x)+b=\sum_{i=1}^{m}a_iy_i\kappa(x,x_i)+b$$\kappa 为核函数.$ 本文作者： 张峰本文链接： https://zhanglaplace.github.io/2017/09/10/Linear-Regression/版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++随笔]]></title>
    <url>%2F2017%2F09%2F08%2FC%2B%2B%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[重写，重定义、重载的区别 重写$\qquad 子类(派生类)重新定义基类的虚函数方法，要求函数名，函数参数，返回类型完全相同.并\\$$且基于必须是虚函数，不能有static关键字,重写函数的访问修饰符可以与基类的不同。\\$$\qquad 基类指针指向派生类，若实现了重写，则调用派生类，若没，则调用基类,即实现多态$ 重定义$\qquad 子类(派生类)重新申明和定义基类的函数，要求函数名相同，但是返回值可以不同，参数\\$$不同，无论有无virtual，基类的都将被隐藏，参数相同，基类如果没有virtual，则基类的函被\\$$隐藏$ 重载$\qquad函数名相同，但是他们的参数列表个数或者顺序，类型不同，且不能仅有返回类型不同，要\\$$求再同一个作用于.$ 多态的实现方式概念$\qquad 多态: 即程序运行中，系统根据对象指针所指向的类别对相同的消息进行不同的方法处理$ 动态多态$\qquad 通过类的继承和虚函数机制，在程序运行期实现多态,虚函数表$ 静态多态$\qquad 函数重载；运算符重载$ 常用排序算法快速排序$\qquad 快速排序的实现:$12345678910111213141516171819void quickSort(int a[],int l ,int r)&#123;//或者vector if(l &lt; r)&#123; int i = l ,j = r ; int sed = a[i];//种子点 while(i &lt; j )&#123; while(i &lt; j &amp;&amp; a[j] &gt; sed ) --j; if(i &lt; j) a[i++] = a[j]; while(i &lt; j &amp;&amp; a[i] &lt; sed ) ++i; if(i &lt; j) a[j--] = a[i]; &#125; a[i] = sed; quickSort(a,l,i-1); qucikSort(a,i+1,r); &#125;&#125; 本文作者： 张峰本文链接： https://zhanglaplace.github.io/2017/09/08/C++%E9%9A%8F%E7%AC%94/版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Logistic回归分析]]></title>
    <url>%2F2017%2F09%2F07%2Flogistic%2F</url>
    <content type="text"><![CDATA[Logistic回归分析$\qquad Logistic回归为概率型非线性回归模型，机器学习常用的二分类分类器，其表达式为:$ $\quad \quad z=w_{1}*x_{1}+w_{2}*x_{2}+\cdots +w_{n}*x_{n}+b=\sum_{i=0}^n w_{i}x_{i} (其中 b等于w_{0}，x_{0}等于1)则:$$$f(x) = \frac{1}{1+exp(-z)}$$ $\quad \quad$即对于二分类，如果$f(x)\ge{0.5}$,则$x$属于第一类，即预测$y=1$，反之$x$属于第二类，预测$y=0$；样本的分布如下，其中，$C_1$表示第一个类别，$C_2$表示第二个类别，样本个数为$n$ $$trainingData \quad\, x^1 \quad\, x^2 \quad\, x^3 \quad\,\cdots \quad\, x^n $$ $\qquad \qquad \qquad \qquad \qquad \qquad labels \qquad \quad C_{1} \quad C_{1} \quad C_{2} \quad \cdots \quad C_{1} \\$$\qquad$我们的目的是：对于类别为$1$的正样本$f_{w,b}(x)$ 尽可能大,而类别为$2$的负样本$f_{w,b}(x)$ 尽可能小,则我们需要最大化：$L(w,b)=f_{w,b}(x^1)f_{w,b}(x^2)(1-f_{w,b}(x^3))\cdots f_{w,b}(x^n)$来寻找最佳的$w$和$b$$$w^{*},b^{*} = arg\max\limits_{w,b}(L(w,b))\Longrightarrow w^{*},b^{*} = arg\min\limits_{w,b}(-ln{L(w,b)})$$ 随机梯度下降法$\qquad 我们需要优化的函数:-ln{L(w,b)} = -{ln{f_{w,b}(x^1)}+lnf_{w,b}(x^2)+ln(1-f_{w,b}(x^3))+\cdots lnf_{w,b}(x^n)}\quad \\$$$\qquad 假设：\begin{cases}\hat{y} = 1 \qquad x\in1 \\\\\\hat{y} = 0 \qquad x\in0\end{cases}\qquad 已知\,f(x) = \frac{1}{1+exp(-z)}\quad z = \sum_{i=0}^n w_{i}x_{i} 则$$$\qquad 我们需要优化的函数简化为：ln{L(w,b)} =\sum_{j=1}^{n}{\hat{y}^j\,lnf_{w,b}(x^j)+(1-\hat{y}^j)\,ln(1-f_{w,b}(x^j))} \\$ $\qquad 当\,\,\hat{y}=1时\quad \hat{y}\,lnf_{w,b}(x)+(1-\hat y)\,ln(1-f_{w,b}(x)) = lnf_{w,b}(x) \\$$\qquad 当\,\,\hat{y}=0时\quad \hat{y}\,lnf_{w,b}(x)+(1-\hat y)\,ln(1-f_{w,b}(x)) = ln(1-f_{w,b}(x)) \qquad \\$$\qquad 即均满足上式 , 因此:$ $\qquad \qquad \quad \frac{\partial lnL(w,b)}{\partial w_i}=\sum_{j=1}^{n}\hat{y}^j\frac{ \partial lnf_{w,b}(x^j) }{\partial w_i}+(1-\hat{y}^j)\frac{\partial (1-lnf_{w,b}(x^j))}{\partial w_i} \\$ $\qquad \quad \quad 而 \, \frac{\partial lnf_{w,b}(x)}{\partial w_i}=\frac{\partial lnf_{w,b}(x)}{\partial z}*\frac{\partial z}{\partial w_i} \\$ $\qquad \qquad \qquad \qquad \quad=\frac{1}{f_{w,b}(x)}* \frac{\partial f_{w,b}(x)}{\partial z}*x_i \\$ $\qquad \qquad \qquad \qquad \quad=\frac{1}{f_{w,b}(x)}*f_{w,b}(x)*(1-f_{w,b}(x))*x_i \\$ $\qquad \qquad \qquad \qquad \quad=(1-f_{w,b}(x))*x_i \\$ $\quad \quad 同理 \quad \frac{\partial (1-lnf_{w,b}(x))}{\partial w_i}=f_{w,b}(x)*x_i \qquad 则化简后:\\$$\qquad \quad\,\, \qquad \frac{\partial lnL(w,b)}{\partial w_i}=\sum_{j=1}^{n}\hat{y}^j\frac{ \partial lnf_{w,b}(x^j) }{\partial w_i}+(1-\hat{y}^j)\frac{\partial (1-lnf_{w,b}(x^j))}{\partial w_i} \\$ $\qquad \qquad \qquad \quad \qquad = \sum_{j=1}^{n}{\hat{y}^j(1-f_{w,b}(x^j))x^j_i+(1-\hat{y}^j)*f_{w,b}(x^j)x^j_i} \\$ $\qquad \qquad \quad\qquad \qquad = \sum_{j=1}^{n}(\hat{y}^j -f_{w,b}(x^j))x^j_i \\$ $\qquad b的推导与w的相似，可以得到w的更新迭代过程：w_{i} \leftarrow w_{i}-\alpha*\sum_{j=0}^{n}(\hat{y}^j-f_{w,b}(x^j))x^j_i \\$ 思考题1. 为什么选用$crossEntropy$损失函数，而不用L2损失函数$答:logistic不像linear \,\, regression使用L2损失函数的原因，主要是由于logistic的funcion的形式，\\$$由于sigmoid函数的存在，如果logistic采取L2 loss时，损失函数为：\\$$$\frac{\partial (f_{w,b}(x)-\hat{y})^2}{\partial w_i}=2(f_{w,b}(x)-\hat{y})f_{w,b}(x)(1-f_{w,b}(x))x_i $$$则当\,\hat{y}=1, f_{w,b}(x) = 1 \quad 预测为1 ，即预测完全正确时 \quad loss=0 \quad \\$$但是当\,\hat{y}=1,f_{w,b}(x) = 0 \quad 预测为0 ，即预测完全错误时 \quad loss却依然为0 \quad显然不对 \\$ 2. $logistic \,\,regression$的分类概率为什么选取了$sigmoid$函数$答: 我们假设样本的分布服从二次高斯分布，即\\$ $f_{\mu,\Sigma}(x) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma|^{1/2}}exp{-\frac{1}{2}(x-\mu)^T|\Sigma|^{-1}(x-\mu)},其中\mu为均值，\Sigma为协方差矩阵 \\$ $输入为x，输出f_{\mu,\Sigma}(x)为样本x的概率密度，高斯分布的形状分布取决于均值\mu和协方差矩阵\Sigma, \\$$因此需要求取最佳的高斯分布来满足样本的分布 \\$ $$Maximum Likelihood : L(\mu,\Sigma) = f_{\mu,\Sigma}(x^1)f_{\mu,\Sigma}(x^2)f_{\mu,\Sigma}(x^3)\cdots\cdots f_{\mu,\Sigma}(x^{N})$$$$\mu^{*}，\Sigma^{*} = arg\max\limits_{\mu,\Sigma}L(\mu,\Sigma)$$$$\mu^{*} = \frac{1}{N}\sum_{i=0}^{N}{x^i}$$$$\Sigma^{*} = \frac{1}{N}\sum_{i=0}^{N}{(x^i-\mu^{*})(x^i-\mu^{*})^T}$$ $对于一个二分类，我们假设类别1的样本高斯分布的均值为\mu^1,类别2的样本的高斯分布均值为\mu^2,他们具有相同的协方差\Sigma \\$$$\mu^1 = \sum_{i=1}^{n_1} x_i\qquad (x_i \in C_1) \quad ;\quad \mu^2 = \sum_{i=1}^{n_2} x_i\quad(x_i \in C_2) $$$$\Sigma^1 = \sum_{i=1}^{n_1}(x_i-u^1)(x_i-u^1)^T ;\quad \Sigma^2 = \sum_{i=1}^{n_2}(x_i-u^2)(x_i-u^2)^T ;\quad \Sigma=\frac{n_1}{n_1+n_2}\Sigma^1+\frac{n_1}{n_1+n_2}\Sigma^2 $$ $对于样本x，如果属于C_1则有：\\$ $\qquad \qquad\qquad \qquad P(C_{1}|x) \,\,= \frac{P(C_{1},x)}{P(x)} \\$ $\qquad \qquad\qquad \qquad \qquad \qquad =\frac{P(x|C_{1})*P(C_{1})}{P(x|C_{1})*P(C_{1})+P(x|C_{2})*P(C_{2})} \\$ $\qquad \qquad\qquad \qquad \qquad \qquad =\frac{1}{1+\frac{P(x|C_{2})P(C_{2})}{P(x|C_{1})P(C_{1})}} \\$ $\qquad \qquad\qquad \qquad \qquad \qquad =\frac{1}{1+exp(-\alpha)} \\$ $其中\,\, \alpha= \ln(\frac{P(x|C_{1})*P(C_{1})}{P(x|C_{2})*P(C_{2})})$ $将P(x|C_i)带入高斯分布的公式:\\$$$P(C_1)=\frac{n_1}{n_1+n_2}\quad , \quad P(C_2)=\frac{n_2}{n_1+n_2} $$$$P(x|C_1) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma|^{1/2}}exp{-\frac{1}{2}(x-\mu^1)^T|\Sigma|^{-1}(x-\mu^1)} $$$$P(x|C_2) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma|^{1/2}}exp{-\frac{1}{2}(x-\mu^2)^T|\Sigma|^{-1}(x-\mu^2)} $$$\alpha= lnP(x|C_1)-lnP(x|C_2)+ln\frac{P(C_1)}{P(C_2)} \\$$\quad =-\frac{1}{2}(x-\mu^1)^T|\Sigma|^{-1}(x-\mu^1)-(-\frac{1}{2}(x-\mu^2)^T|\Sigma|^{-1}(x-\mu^2))+ln\frac{n_1}{n_2}\\$$\quad =-\frac{1}{2}x^T(\Sigma)^{-1}x+(u^1)^T(\Sigma)^{-1}x-\frac{1}{2}(u^1)^T(\Sigma)^{-1}u^1+\frac{1}{2}x^T(\Sigma)^{-1}x-(u^2)^T(\Sigma)^{-1}x+\frac{1}{2}(u^2)^T(\Sigma)^{-1}u^2+ln\frac{n_1}{n_2}\\$$\quad = (u^1-u^2)^T(\Sigma)^{-1}x-\frac{1}{2}(u^1)^T(\Sigma)^{-1}u^1+\frac{1}{2}(u^2)^T(\Sigma)^{-1}u^2+ln\frac{n_1}{n_2}\\$$\quad = wx+b\\$$\quad w = (u^1-u^2)^T(\Sigma)^{-1} \quad ; \quad b=-\frac{1}{2}(u^1)^T(\Sigma)^{-1}u^1+\frac{1}{2}(u^2)^T(\Sigma)^{-1}u^2+ln\frac{n_1}{n_2}\\$$\quad 因此可以得到对于满足猜想的二次高斯分布的datasets，生成模型的分类表达式与logistic是一致的 \\$ 生成模型与判别模型生成模型基于现有的样本，对样本分布做了一个猜测（极大似然），因此当数据集较少，或者有噪声的时候， 都能达到一个较好的结果(不过分依赖于实际样本),并且可以根据不同的概率model完成样本分布的gauss 判别模型基于决策的方式（判别式），通过优化方法(sgd)寻找最优参数，对样本的依赖大，样本充足时，其 效果一般比生成模型好(基于事实 not 基于猜测) 小扩展多分类基于先验概率得出的每个类别的后验概率为softmax函数，即： $\\$$\qquad \qquad \qquad \qquad \, P(C_i|x) = \frac{P(x|C_i)P(C_i)}{\sum_{j=1}^{n}P(x|C_j)P(C_j)}\\$ $\qquad \qquad \qquad \qquad \qquad \qquad = \frac{exp(a_k)}{\sum_{j=1}^{n}a_j}\\$ 待续未完待续 本文作者： 张峰本文链接： https://zhanglaplace.github.io/2017/09/07/logistic/版权声明： 本博客所有文章，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>统计学习方法</tag>
      </tags>
  </entry>
</search>
